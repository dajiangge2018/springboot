package org.jiang.netty;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.DefaultHttpResponse;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpObject;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import io.netty.util.CharsetUtil;

/**
 * 
 * @author 15012 编写自定义助手类
 *
 */
//SimpleChannelInboundHandler 相对于请求来讲，相当于入站
public class CustomerHandler extends SimpleChannelInboundHandler<HttpObject>{

	@Override
	protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {
		// 获取Channel
		Channel channel = ctx.channel();
		if(msg instanceof HttpRequest) {
			//打印客户端的远程地址
			System.out.println(channel.remoteAddress());
			
			//定义发送的数据消息
			ByteBuf content = Unpooled.copiedBuffer("hello netty~",CharsetUtil.UTF_8);
			//构建一个FullHttpResponse
			FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, 
																								 HttpResponseStatus.OK,
																								 content);
			//为响应增加数据类型和长度
			response.headers().set(HttpHeaderNames.CONTENT_TYPE,"text/plain");
			response.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());
			
			//把响应刷到客户端
			ctx.writeAndFlush(response);
		}
		
	}

}
